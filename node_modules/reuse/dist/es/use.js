function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/* eslint-disable no-param-reassign */
import * as React from "react";
import { omit, toArray, arrayContainsArray } from "./utils";
var Use = React.forwardRef(function (props, ref) {
  return render(Object.assign(omit(props, "useNext"), {
    ref: ref,
    use: props.useNext
  }));
});

function render(props) {
  // filter Use and string components in the middle
  var _toArray$filter = toArray(props.use).filter(function (x, i, arr) {
    return x !== Use && (typeof x !== "string" || i === arr.length - 1);
  }),
      Component = _toArray$filter[0],
      useNext = _toArray$filter.slice(1);

  if (!Component) {
    return null;
  }

  var finalProps = omit(props, "use", "useNext");

  if (!useNext.length || typeof Component === "string") {
    return React.createElement(Component, finalProps);
  }

  if (useNext.length === 1) {
    return React.createElement(Component, _extends({}, finalProps, {
      use: useNext[0]
    }));
  }

  return React.createElement(Component, _extends({}, props, {
    use: Use,
    useNext: useNext
  }));
}

function isUseComponent(component) {
  return component && Array.isArray(component.uses);
}

function use() {
  for (var _len = arguments.length, uses = new Array(_len), _key = 0; _key < _len; _key++) {
    uses[_key] = arguments[_key];
  }

  var First = uses[0],
      next = uses.slice(1);

  if (isUseComponent(First) && arrayContainsArray(First.uses, next)) {
    return First;
  }

  var Component = React.forwardRef(function (props, ref) {
    return render(Object.assign(omit(props, "useNext"), {
      ref: ref,
      use: uses.concat(toArray(props.use), toArray(props.useNext))
    }));
  });
  Component.uses = uses;
  return Component;
}

export default use;