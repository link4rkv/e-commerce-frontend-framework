import * as React from "react";
import { StateUpdater, StateCallback, MountContainer, SetContextState, ProviderProps } from "./types";
interface ProviderState<S> {
    state: S;
    setContextState: SetContextState<S, string>;
    mountContainer: MountContainer;
}
declare class Provider<State extends {
    [key: string]: any;
}> extends React.Component<ProviderProps<State>, ProviderState<State>> {
    static defaultProps: {
        initialState: {};
    };
    private containers;
    private devtools?;
    constructor(props: ProviderProps<State>);
    componentDidMount(): void;
    componentWillUnmount(): void;
    mountContainer: MountContainer;
    setContextState: SetContextState<State, string>;
    getProps: (type?: string | undefined) => {
        state: State;
        setContextState: (context: string, updater: Partial<State> | StateUpdater<State>, callback?: StateCallback | undefined) => void;
    };
    render(): JSX.Element;
}
export default Provider;
