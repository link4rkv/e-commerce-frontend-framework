import { theme } from 'styled-tools';
import styled from './styled.js';
import use from './use.js';
import Box from './Box.js';
import { a as _extends, f as _objectSpread, c as _inheritsLoose, d as _assertThisInitialized, e as _defineProperty } from './chunk-fb907809.js';
import { forwardRef, createElement, Component, createRef } from 'react';
import { oneOfType, number, string, bool, oneOf, func, object, arrayOf, node } from 'prop-types';
import { a as StepContainer, b as StepNext, c as StepPrevious } from './chunk-476ff52c.js';
import { a as hoist } from './chunk-9e6fe658.js';
import Hidden from './Hidden.js';
import { a as callAll } from './chunk-d8771a86.js';
import Step from './Step.js';
import 'styled-components';
import 'reuse';
import '@emotion/is-prop-valid';
import './chunk-bbbc8dce.js';
import './chunk-a7ce379e.js';
import 'constate';
import 'react-dom';
import './chunk-52a78301.js';
import './chunk-9c9a5f71.js';

var Tabs = styled(Box).withConfig({
  displayName: "Tabs",
  componentId: "sc-19q23fg-0"
})(["", ";"], theme("Tabs"));
Tabs.defaultProps = {
  role: "tablist"
};
var Tabs$1 = use(Tabs, "ul");

var initialState = {
  loop: true,
  current: 0
}; // istanbul ignore next

var TabsContainer = function TabsContainer(props) {
  return createElement(StepContainer, _extends({}, props, {
    initialState: _objectSpread({}, initialState, props.initialState)
  }));
}; // @ts-ignore


TabsContainer.propTypes = {
  initialState: object
};

var TabsNext = styled(StepNext).withConfig({
  displayName: "TabsNext",
  componentId: "wc1t0p-0"
})(["", ";"], theme("TabsNext"));
var TabsNext$1 = use(TabsNext, "button");

var TabsPanelComponent = function TabsPanelComponent(props) {
  var isCurrent = props.isCurrent,
      tab = props.tab;
  return createElement(Hidden, _extends({
    id: tab + "Panel",
    "aria-labelledby": tab + "Tab",
    unmount: true,
    visible: isCurrent && isCurrent(tab)
  }, props));
};

var TabsPanel = styled(hoist(TabsPanelComponent, Hidden)).withConfig({
  displayName: "TabsPanel",
  componentId: "ezrcu8-0"
})(["", ";"], theme("TabsPanel")); // @ts-ignore

TabsPanel.propTypes = {
  tab: string.isRequired,
  isCurrent: func.isRequired
};
TabsPanel.defaultProps = {
  role: "tabpanel"
};
var TabsPanel$1 = use(TabsPanel, "div");

var TabsPrevious = styled(StepPrevious).withConfig({
  displayName: "TabsPrevious",
  componentId: "sc-1hmi00r-0"
})(["", ";"], theme("TabsPrevious"));
var TabsPrevious$1 = use(TabsPrevious, "button");

/* eslint-disable no-param-reassign */
function createElementRef(scope, property) {
  return function (element) {
    scope[property] = element;

    if (scope.props && scope.props.elementRef) {
      scope.props.elementRef(element);
    }
  };
}

var TabsTabComponent =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(TabsTabComponent, _React$Component);

  function TabsTabComponent() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "element", createRef());

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "show", function () {
      var _this$props = _this.props,
          show = _this$props.show,
          isCurrent = _this$props.isCurrent,
          tab = _this$props.tab;

      if (!isCurrent(tab)) {
        show(tab);
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "keyDown", function (e) {
      var keyMap = {
        ArrowLeft: _this.props.previous,
        ArrowRight: _this.props.next
      };

      var inKeyMap = function inKeyMap(key) {
        return key in keyMap;
      };

      if (inKeyMap(e.key)) {
        e.preventDefault();
        keyMap[e.key]();
      }
    });

    return _this;
  }

  var _proto = TabsTabComponent.prototype;

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var _this$props2 = this.props,
        current = _this$props2.current,
        isCurrent = _this$props2.isCurrent,
        tab = _this$props2.tab;

    if (prevProps.current !== current && isCurrent(tab) && this.element && this.element.current) {
      this.element.current.focus();
    }
  };

  _proto.render = function render() {
    var _this$props3 = this.props,
        isCurrent = _this$props3.isCurrent,
        tab = _this$props3.tab,
        className = _this$props3.className,
        onClick = _this$props3.onClick,
        onFocus = _this$props3.onFocus,
        onKeyDown = _this$props3.onKeyDown;
    var active = isCurrent(tab);
    var activeClassName = active ? "active" : "";
    var finalClassName = [className, activeClassName].filter(Boolean).join(" ");
    return createElement(Step, _extends({
      id: tab + "Tab",
      step: tab,
      "aria-selected": active,
      "aria-controls": tab + "Panel",
      tabIndex: active ? 0 : -1,
      visible: true
    }, this.props, {
      onClick: callAll(this.show, onClick),
      onFocus: callAll(this.show, onFocus),
      onKeyDown: callAll(this.keyDown, onKeyDown),
      className: finalClassName,
      elementRef: createElementRef(this, "element")
    }));
  };

  return TabsTabComponent;
}(Component);

var TabsTab = styled(hoist(TabsTabComponent, Step)).withConfig({
  displayName: "TabsTab",
  componentId: "stq2d4-0"
})(["", ";"], theme("TabsTab")); // @ts-ignore

TabsTab.propTypes = {
  tab: string.isRequired,
  current: number.isRequired,
  register: func.isRequired,
  update: func.isRequired,
  unregister: func.isRequired,
  isCurrent: func.isRequired,
  show: func.isRequired,
  next: func.isRequired,
  previous: func.isRequired,
  className: string,
  disabled: bool,
  onClick: func,
  onFocus: func,
  onKeyDown: func
};

var noop = function noop() {};

TabsTab.defaultProps = {
  role: "tab",
  register: noop,
  update: noop,
  unregister: noop,
  isCurrent: function isCurrent() {
    return false;
  },
  show: noop,
  next: noop,
  previous: noop
};
var TabsTab$1 = use(TabsTab, "li");

var index = Object.assign(Tabs$1, {
  Container: TabsContainer,
  Next: TabsNext$1,
  Panel: TabsPanel$1,
  Previous: TabsPrevious$1,
  Tab: TabsTab$1
});

export default index;
export { initialState };
