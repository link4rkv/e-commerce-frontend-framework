import { a as _extends, c as _inheritsLoose } from './chunk-fb907809.js';
import { forwardRef, createElement, Component, createRef } from 'react';
import { oneOfType, number, string, bool, oneOf, func, object, arrayOf, node } from 'prop-types';
import { theme } from 'styled-tools';
import { a as hoist } from './chunk-9e6fe658.js';
import styled from './styled.js';
import use from './use.js';
import Hidden from './Hidden.js';
import { c as HiddenToggle, b as HiddenShow, a as HiddenHide } from './chunk-9c9a5f71.js';
import { a as StepContainer, b as StepNext, c as StepPrevious } from './chunk-476ff52c.js';
import 'styled-components';
import 'reuse';
import 'react-dom';
import './chunk-bbbc8dce.js';
import './chunk-a7ce379e.js';
import './chunk-d8771a86.js';
import './Box.js';
import '@emotion/is-prop-valid';
import './chunk-52a78301.js';
import 'constate';

var StepComponent =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(StepComponent, _React$Component);

  function StepComponent(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    var _this$props = _this.props,
        register = _this$props.register,
        step = _this$props.step,
        order = _this$props.order;
    register(step, order);
    return _this;
  }

  var _proto = StepComponent.prototype;

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var _this$props2 = this.props,
        step = _this$props2.step,
        update = _this$props2.update,
        order = _this$props2.order;

    if (prevProps.step !== step || prevProps.order !== order) {
      update(prevProps.step, step, order);
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    var _this$props3 = this.props,
        step = _this$props3.step,
        unregister = _this$props3.unregister;
    unregister(step);
  };

  _proto.render = function render() {
    var _this$props4 = this.props,
        isCurrent = _this$props4.isCurrent,
        step = _this$props4.step;
    return createElement(Hidden, _extends({
      unmount: true,
      visible: isCurrent(step)
    }, this.props));
  };

  return StepComponent;
}(Component);

var Step = styled(hoist(StepComponent, Hidden)).withConfig({
  displayName: "Step",
  componentId: "sc-1b10ris-0"
})(["", ";"], theme("Step")); // @ts-ignore

Step.propTypes = {
  step: string.isRequired,
  register: func.isRequired,
  update: func.isRequired,
  unregister: func.isRequired,
  isCurrent: func.isRequired,
  order: number
};
var Step$1 = use(Step, "div");

var toggle = function toggle(props) {
  return function () {
    return props.toggle && props.toggle(props.step);
  };
};

var StepToggleComponent = function StepToggleComponent(props) {
  return createElement(HiddenToggle, _extends({}, props, {
    toggle: toggle(props)
  }));
};

var StepToggle = styled(hoist(StepToggleComponent, HiddenToggle)).withConfig({
  displayName: "StepToggle",
  componentId: "sc-73h2vf-0"
})(["", ";"], theme("StepToggle")); // @ts-ignore

StepToggle.propTypes = {
  toggle: func.isRequired,
  step: string.isRequired
};
var StepToggle$1 = use(StepToggle, "button");

var show = function show(props) {
  return function () {
    return props.show && props.show(props.step);
  };
};

var StepShowComponent = function StepShowComponent(props) {
  return createElement(HiddenShow, _extends({}, props, {
    show: show(props)
  }));
};

var StepShow = styled(hoist(StepShowComponent, HiddenShow)).withConfig({
  displayName: "StepShow",
  componentId: "rrfdz6-0"
})(["", ";"], theme("StepShow")); // @ts-ignore

StepShow.propTypes = {
  show: func.isRequired,
  step: string.isRequired
};
var StepShow$1 = use(StepShow, "button");

var StepHide = styled(HiddenHide).withConfig({
  displayName: "StepHide",
  componentId: "sc-1uq7y3z-0"
})(["", ";"], theme("StepHide"));
var StepHide$1 = use(StepHide, "button");

var Step$2 = Object.assign(Step$1, {
  Container: StepContainer,
  Toggle: StepToggle$1,
  Show: StepShow$1,
  Hide: StepHide$1,
  Next: StepNext,
  Previous: StepPrevious
});

export default Step$2;
