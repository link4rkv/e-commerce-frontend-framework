import { withProp, palette, switchProp, ifProp, prop } from 'styled-tools';
import { a as numberToPx } from './chunk-a7ce379e.js';

var bool = function bool(cssProp, validComponentProps) {
  return function (props) {
    var keys = Object.keys(props).filter(function (k) {
      return props[k] && validComponentProps.indexOf(k) >= 0;
    }).map(function (k) {
      return k.replace(/([A-Z])/g, "-$1").toLowerCase();
    });

    if (keys.length) {
      return cssProp + ": " + keys.join(" ") + ";";
    }

    return "";
  };
};
var value = function value(cssProp, componentProp) {
  return function (props) {
    var v = props[componentProp];
    if (typeof v === "undefined") return "";
    return cssProp + ": " + numberToPx(v) + ";";
  };
};
var textColorWithProps = withProp(["opaque", "palette", "tone"], function (opaque, paletteProp, tone) {
  if (tone === void 0) {
    tone = 0;
  }

  return palette(opaque ? paletteProp + "Text" : paletteProp, tone, "inherit");
});
var bgColorWithProps = withProp(["opaque", "palette", "tone"], function (opaque, paletteProp, tone) {
  if (tone === void 0) {
    tone = 0;
  }

  if (!opaque) {
    return "unset";
  }

  return palette(paletteProp, tone, "unset");
});
var hasTransition = function hasTransition(props) {
  return Boolean(props.animated || props.fade || props.slide || props.expand);
};
var translate3d = function translate3d(x, y, z) {
  return "translate3d(" + numberToPx(x) + ", " + numberToPx(y) + ", " + numberToPx(z) + ")";
};
var origin = function origin(x, y) {
  if (x === void 0) {
    x = "center";
  }

  if (y === void 0) {
    y = "center";
  }

  return numberToPx(x) + " " + numberToPx(y);
};
var calc = function calc(a, b) {
  return "calc(" + numberToPx(a) + " + " + numberToPx(b) + ")";
};
var minus = function minus(v) {
  return "-" + numberToPx(v);
};
var expand = ifProp({
  expand: true
}, prop("defaultExpand", "center"), prop("expand"));
var slide = ifProp({
  slide: true
}, prop("defaultSlide", "right"), prop("slide"));
var scaleWithProps = ifProp("expand", "scale(0.01)");
var originWithProps = withProp(["originX", "originY"], function (x, y) {
  return switchProp(expand, {
    center: origin(calc("50%", x), calc("50%", y)),
    top: origin(calc("50%", x), calc("100%", y)),
    right: origin(x, calc("50%", y)),
    bottom: origin(calc("50%", x), y),
    left: origin(calc("100%", x), calc("50%", y))
  }, origin(calc("50%", x), calc("50%", y)));
});
var translateWithProps = withProp(["translateX", "translateY"], translate3d);
var slideWithProps = withProp(["translateX", "translateY", "slideOffset"], function (x, y, offset) {
  if (offset === void 0) {
    offset = "100%";
  }

  return switchProp(slide, {
    top: translate3d(x, calc(offset, y)),
    right: translate3d(calc(minus(offset), x), y),
    bottom: translate3d(x, calc(minus(offset), y)),
    left: translate3d(calc(offset, x), y)
  }, translate3d(x, y));
});

export { bool as a, bgColorWithProps as b, textColorWithProps as c, hasTransition as d, translateWithProps as e, originWithProps as f, scaleWithProps as g, slideWithProps as h, value as i };
