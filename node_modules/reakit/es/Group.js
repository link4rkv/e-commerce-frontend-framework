import { theme, ifProp, prop, withProp } from 'styled-tools';
import styled, { css } from './styled.js';
import use from './use.js';
import Box from './Box.js';
import { oneOfType, number, string, bool, oneOf, func, object, arrayOf, node } from 'prop-types';
import s from 'styled-selector';
import 'styled-components';
import 'reuse';
import '@emotion/is-prop-valid';
import './chunk-fb907809.js';
import 'react';
import './chunk-bbbc8dce.js';
import './chunk-a7ce379e.js';

var GroupItem = styled(Box).withConfig({
  displayName: "GroupItem",
  componentId: "sc-2orogz-0"
})(["", ";"], theme("GroupItem"));
var GroupItem$1 = use(GroupItem, "div");

var groupItemSelector = s(GroupItem$1);

var verticalAt = function verticalAt(pass, fail) {
  return ifProp("verticalAt", css(["@media (min-width:", "px){", ";}@media (max-width:", "px){", ";}"], withProp("verticalAt", function (x) {
    return x + 1;
  }), fail, prop("verticalAt"), pass), fail);
};

var Group = styled(Box).withConfig({
  displayName: "Group",
  componentId: "a5wmtr-0"
})(["display:flex;flex-direction:", ";", ";> *:not(:first-child):not(:last-child),> *:not(:first-child):not(:last-child) ", "{border-radius:0;", ";}> *:first-child,> *:first-child ", "{border-bottom-right-radius:0;", ";}> *:last-child,> *:last-child ", "{border-top-left-radius:0;", ";}", ";"], ifProp("vertical", "column", "row"), verticalAt("flex-direction: column"), groupItemSelector, verticalAt(css(["border-top-width:0;"]), css(["border-", "-width:0;"], ifProp("vertical", "top", "left"))), groupItemSelector, verticalAt(css(["border-bottom-left-radius:0;"]), css(["border-", "-radius:0;"], ifProp("vertical", "bottom-left", "top-right"))), groupItemSelector, verticalAt(css(["border-top-width:0;border-top-right-radius:0;"]), css(["border-", "-width:0;border-", "-radius:0;"], ifProp("vertical", "top", "left"), ifProp("vertical", "top-right", "bottom-left"))), theme("Group")); // @ts-ignore

Group.propTypes = {
  vertical: bool,
  verticalAt: number
};
Group.defaultProps = {
  role: "group"
};
var Group$1 = use(Group, "div");

var index = Object.assign(Group$1, {
  Item: GroupItem$1
});

export default index;
