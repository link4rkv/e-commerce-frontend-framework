import { a as _extends, c as _inheritsLoose, d as _assertThisInitialized, e as _defineProperty } from './chunk-fb907809.js';
import { forwardRef, createElement, Component, createRef } from 'react';
import { findDOMNode } from 'react-dom';
import { oneOfType, number, string, bool, oneOf, func, object, arrayOf, node } from 'prop-types';
import { prop, theme, ifProp } from 'styled-tools';
import { d as hasTransition, e as translateWithProps, f as originWithProps, g as scaleWithProps, h as slideWithProps } from './chunk-bbbc8dce.js';
import { a as hoist } from './chunk-9e6fe658.js';
import { a as callAll } from './chunk-d8771a86.js';
import styled, { css } from './styled.js';
import use from './use.js';
import Box from './Box.js';
import { a as HiddenContainer } from './chunk-52a78301.js';
import { a as HiddenHide, b as HiddenShow, c as HiddenToggle } from './chunk-9c9a5f71.js';
import './chunk-a7ce379e.js';
import 'styled-components';
import 'reuse';
import '@emotion/is-prop-valid';
import 'constate';

var HiddenComponent =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(HiddenComponent, _React$Component);

  function HiddenComponent() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "state", {
      visible: _this.props.visible,
      transitioning: _this.props.transitioning
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "applyState", function () {
      var _this$props = _this.props,
          visible = _this$props.visible,
          unmount = _this$props.unmount;

      if (typeof window !== "undefined" && unmount && hasTransition(_this.props)) {
        if (visible) {
          _this.setState({
            transitioning: true
          });

          requestAnimationFrame(function () {
            return (// it may be still transitioning, but it doesn't matter
              // we just need to set it to false in another loop
              _this.setState({
                transitioning: false,
                visible: true
              })
            );
          });
        } else {
          _this.setState({
            visible: false,
            transitioning: true
          });
        }
      } else {
        _this.setState({
          visible: visible
        });
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleTransitionEnd", function () {
      var _this$props2 = _this.props,
          visible = _this$props2.visible,
          unmount = _this$props2.unmount;

      if (unmount && !visible) {
        // at this point, this is the last state left to return null on render
        _this.setState({
          transitioning: false
        });
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleKeyDown", function (e) {
      var _this$props3 = _this.props,
          visible = _this$props3.visible,
          hide = _this$props3.hide;

      if (e.key === "Escape" && visible && hide) {
        hide();
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleClickOutside", function (e) {
      var node$$1 = findDOMNode(_assertThisInitialized(_assertThisInitialized(_this)));
      var _this$props4 = _this.props,
          hide = _this$props4.hide,
          visible = _this$props4.visible;
      var shouldHide = node$$1 instanceof Element && !node$$1.contains(e.target) && visible && hide;

      if (shouldHide) {
        // it's possible that the outside click was on a toggle button
        // in that case, we should "wait" before hiding it
        // otherwise it could hide before and then toggle, showing it again
        setTimeout(function () {
          return _this.props.visible && hide && hide();
        });
      }
    });

    return _this;
  }

  var _proto = HiddenComponent.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var _this$props5 = this.props,
        hideOnEsc = _this$props5.hideOnEsc,
        hideOnClickOutside = _this$props5.hideOnClickOutside;

    if (hideOnEsc) {
      document.body.addEventListener("keydown", this.handleKeyDown);
    }

    if (hideOnClickOutside) {
      document.body.addEventListener("click", this.handleClickOutside);
    }
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    if (prevProps.visible !== this.props.visible) {
      this.applyState();
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    document.body.removeEventListener("keydown", this.handleKeyDown);
    document.body.removeEventListener("click", this.handleClickOutside);
  };

  _proto.render = function render() {
    var _this$props6 = this.props,
        unmount = _this$props6.unmount,
        onTransitionEnd = _this$props6.onTransitionEnd;
    var _this$state = this.state,
        visible = _this$state.visible,
        transitioning = _this$state.transitioning;

    if (unmount && !visible && !transitioning) {
      return null;
    }

    return createElement(Box, _extends({
      "aria-hidden": !visible,
      hidden: !visible && !hasTransition(this.props)
    }, this.props, this.state, {
      onTransitionEnd: callAll(this.handleTransitionEnd, onTransitionEnd)
    }));
  };

  return HiddenComponent;
}(Component);

var Hidden = styled(hoist(HiddenComponent, Box)).withConfig({
  displayName: "Hidden",
  componentId: "sc-1r7zvzf-0"
})(["transform:", ";", ";&[aria-hidden=\"true\"]{pointer-events:none;", ";", ";}", ";"], translateWithProps, ifProp(hasTransition, css(["transform-origin:", ";transition:all ", " ", " ", ";"], originWithProps, prop("duration"), prop("timing"), prop("delay"))), ifProp("fade", "opacity: 0"), ifProp(hasTransition, css(["transform:", " ", ";visibility:hidden;will-change:transform,opacity;"], slideWithProps, scaleWithProps), "display: none !important"), theme("Hidden")); // @ts-ignore

Hidden.propTypes = {
  visible: bool,
  hide: func,
  hideOnEsc: bool,
  hideOnClickOutside: bool,
  unmount: bool,
  fade: bool,
  expand: oneOfType([bool, oneOf(["center", "top", "right", "bottom", "left"])]),
  slide: oneOfType([bool, oneOf(["top", "right", "bottom", "left"])]),
  duration: string,
  delay: string,
  timing: string,
  animated: bool
};
Hidden.defaultProps = {
  duration: "250ms",
  timing: "ease-in-out"
};
var Hidden$1 = use(Hidden, "div");

var Hidden$2 = Object.assign(Hidden$1, {
  Container: HiddenContainer,
  Hide: HiddenHide,
  Show: HiddenShow,
  Toggle: HiddenToggle
});

export default Hidden$2;
