import { a as _extends, b as _objectWithoutPropertiesLoose } from './chunk-fb907809.js';
import { forwardRef, createElement, Component, createRef } from 'react';
import { oneOfType, number, string, bool, oneOf, func, object, arrayOf, node } from 'prop-types';
import { theme } from 'styled-tools';
import { a as hoist } from './chunk-9e6fe658.js';
import { a as callAll } from './chunk-d8771a86.js';
import styled from './styled.js';
import use from './use.js';
import Box from './Box.js';

var HiddenHideComponent = function HiddenHideComponent(_ref) {
  var onClick = _ref.onClick,
      props = _objectWithoutPropertiesLoose(_ref, ["onClick"]);

  return createElement(Box, _extends({
    onClick: callAll(props.hide, onClick)
  }, props));
};

var HiddenHide = styled(hoist(HiddenHideComponent, Box)).withConfig({
  displayName: "HiddenHide",
  componentId: "nbepnv-0"
})(["", ";"], theme("HiddenHide")); // @ts-ignore

HiddenHide.propTypes = {
  hide: func.isRequired,
  onClick: func
};
var HiddenHide$1 = use(HiddenHide, "button");

var HiddenShowComponent = function HiddenShowComponent(_ref) {
  var onClick = _ref.onClick,
      props = _objectWithoutPropertiesLoose(_ref, ["onClick"]);

  return createElement(Box, _extends({
    onClick: callAll(props.show, onClick)
  }, props));
};

var HiddenShow = styled(hoist(HiddenShowComponent, Box)).withConfig({
  displayName: "HiddenShow",
  componentId: "w6ef6h-0"
})(["", ";"], theme("HiddenShow")); // @ts-ignore

HiddenShow.propTypes = {
  show: func.isRequired,
  onClick: func
};
var HiddenShow$1 = use(HiddenShow, "button");

var HiddenToggleComponent = forwardRef(function (_ref, ref) {
  var onClick = _ref.onClick,
      props = _objectWithoutPropertiesLoose(_ref, ["onClick"]);

  return createElement(Box, _extends({
    onClick: callAll(props.toggle, onClick)
  }, props, {
    ref: ref
  }));
});
var HiddenToggle = styled(hoist(HiddenToggleComponent, Box)).withConfig({
  displayName: "HiddenToggle",
  componentId: "kd7ngs-0"
})(["", ";"], theme("HiddenToggle")); // @ts-ignore

HiddenToggle.propTypes = {
  toggle: func.isRequired,
  onClick: func
};
var HiddenToggle$1 = use(HiddenToggle, "button");

export { HiddenHide$1 as a, HiddenShow$1 as b, HiddenToggle$1 as c };
