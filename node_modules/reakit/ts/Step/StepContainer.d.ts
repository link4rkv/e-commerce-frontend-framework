import { ActionMap, SelectorMap, ComposableContainer } from "constate";
export interface StepContainerState {
    loop: boolean;
    ids: Array<string>;
    current: number;
    ordered: {
        [key: string]: number;
    };
}
export interface StepContainerSelectors {
    getCurrentId: () => string;
    hasPrevious: () => boolean;
    hasNext: () => boolean;
    indexOf: (idOrIndex: string | number) => number;
    isCurrent: (idOrIndex: string | number) => boolean;
}
export interface StepContainerActions {
    show: (idOrIndex: string | number) => void;
    hide: () => void;
    toggle: (idOrIndex: string | number) => void;
    previous: () => void;
    next: () => void;
    reorder: (id: string, order?: number) => void;
    register: (id: string, order?: number) => void;
    unregister: (id: string) => void;
    update: (id: string, nextId: string, orderArg?: number) => void;
}
declare const _default: ComposableContainer<StepContainerState, StepContainerActions, StepContainerSelectors, {}> & {
    initialState: StepContainerState;
    actions: ActionMap<StepContainerState, StepContainerActions>;
    selectors: SelectorMap<StepContainerState, StepContainerSelectors>;
};
export default _default;
