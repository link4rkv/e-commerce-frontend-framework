export declare type PropsFn = (props: {
    [key: string]: any;
}) => any;
export declare const bool: (cssProp: string, validComponentProps: string[]) => PropsFn;
export declare const value: (cssProp: string, componentProp: string) => PropsFn;
export declare const textColorWithProps: <P = {}>(props?: P | undefined) => <Props, Theme extends import("styled-tools").ThemeWithPalette>(props: Props & {
    theme: Theme;
}) => any;
export declare const bgColorWithProps: <P = {}>(props?: P | undefined) => "unset" | (<Props, Theme extends import("styled-tools").ThemeWithPalette>(props: Props & {
    theme: Theme;
}) => any);
interface TransitionProps {
    animated?: boolean;
    fade?: boolean | string;
    slide?: boolean | string;
    expand?: boolean | string;
}
export declare const hasTransition: (props: TransitionProps) => boolean;
export declare const translate3d: (x?: string | number | undefined, y?: string | number | undefined, z?: string | number | undefined) => string;
export declare const origin: (x?: string | number, y?: string | number) => string;
export declare const calc: (a?: string | number | undefined, b?: string | number | undefined) => string;
export declare const minus: (v?: string | number | undefined) => string;
export declare const expand: <P = {}>(props?: P | undefined) => (<Props>(props?: Props | undefined) => string | Props[keyof Props]) | (<Props>(props?: Props | undefined) => Props[keyof Props] | undefined);
export declare const slide: <P = {}>(props?: P | undefined) => (<Props>(props?: Props | undefined) => string | Props[keyof Props]) | (<Props>(props?: Props | undefined) => Props[keyof Props] | undefined);
export declare const scaleWithProps: <P = {}>(props?: P | undefined) => string | undefined;
export declare const originWithProps: <P = {}>(props?: P | undefined) => <P = {}>(props?: P | undefined) => string;
export declare const translateWithProps: <P = {}>(props?: P | undefined) => string;
export declare const slideWithProps: <P = {}>(props?: P | undefined) => <P = {}>(props?: P | undefined) => string;
export {};
