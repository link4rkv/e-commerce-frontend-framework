'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var styledTools = require('styled-tools');
var styled = require('./styled.js');
var use = require('./use.js');
var Box = require('./Box.js');
var PropTypes = require('prop-types');
var s = _interopDefault(require('styled-selector'));
require('styled-components');
require('reuse');
require('@emotion/is-prop-valid');
require('./chunk-582bef72.js');
require('react');
require('./chunk-b4ae9232.js');
require('./chunk-f0c301b2.js');

var GroupItem = styled.default(Box.default).withConfig({
  displayName: "GroupItem",
  componentId: "sc-2orogz-0"
})(["", ";"], styledTools.theme("GroupItem"));
var GroupItem$1 = use.default(GroupItem, "div");

var groupItemSelector = s(GroupItem$1);

var verticalAt = function verticalAt(pass, fail) {
  return styledTools.ifProp("verticalAt", styled.css(["@media (min-width:", "px){", ";}@media (max-width:", "px){", ";}"], styledTools.withProp("verticalAt", function (x) {
    return x + 1;
  }), fail, styledTools.prop("verticalAt"), pass), fail);
};

var Group = styled.default(Box.default).withConfig({
  displayName: "Group",
  componentId: "a5wmtr-0"
})(["display:flex;flex-direction:", ";", ";> *:not(:first-child):not(:last-child),> *:not(:first-child):not(:last-child) ", "{border-radius:0;", ";}> *:first-child,> *:first-child ", "{border-bottom-right-radius:0;", ";}> *:last-child,> *:last-child ", "{border-top-left-radius:0;", ";}", ";"], styledTools.ifProp("vertical", "column", "row"), verticalAt("flex-direction: column"), groupItemSelector, verticalAt(styled.css(["border-top-width:0;"]), styled.css(["border-", "-width:0;"], styledTools.ifProp("vertical", "top", "left"))), groupItemSelector, verticalAt(styled.css(["border-bottom-left-radius:0;"]), styled.css(["border-", "-radius:0;"], styledTools.ifProp("vertical", "bottom-left", "top-right"))), groupItemSelector, verticalAt(styled.css(["border-top-width:0;border-top-right-radius:0;"]), styled.css(["border-", "-width:0;border-", "-radius:0;"], styledTools.ifProp("vertical", "top", "left"), styledTools.ifProp("vertical", "top-right", "bottom-left"))), styledTools.theme("Group")); // @ts-ignore

Group.propTypes = {
  vertical: PropTypes.bool,
  verticalAt: PropTypes.number
};
Group.defaultProps = {
  role: "group"
};
var Group$1 = use.default(Group, "div");

var index = Object.assign(Group$1, {
  Item: GroupItem$1
});

exports.default = index;
