'use strict';

var __chunk_1 = require('./chunk-582bef72.js');
var React = require('react');
var PropTypes = require('prop-types');
var constate = require('constate');
var styledTools = require('styled-tools');
var __chunk_5 = require('./chunk-25591e69.js');
var __chunk_4 = require('./chunk-5814b5fa.js');
var styled = require('./styled.js');
var use = require('./use.js');
var Box = require('./Box.js');

function omit(object) {
  var keys = Object.keys(object);
  var result = {};

  for (var _len = arguments.length, paths = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    paths[_key - 1] = arguments[_key];
  }

  for (var i = 0; i < keys.length; i += 1) {
    var key = keys[i];

    if (paths.indexOf(key) === -1) {
      result[key] = object[key];
    }
  }

  return result;
}

var initialState = {
  loop: false,
  ids: [],
  current: -1,
  ordered: {}
};
var selectors = {
  getCurrentId: function getCurrentId() {
    return function (state) {
      return state.ids[state.current];
    };
  },
  hasPrevious: function hasPrevious() {
    return function (state) {
      return state.ids.length > 1 && !!state.ids[state.current - 1];
    };
  },
  hasNext: function hasNext() {
    return function (state) {
      return state.ids.length > 1 && !!state.ids[state.current + 1];
    };
  },
  indexOf: function indexOf(idOrIndex) {
    return function (state) {
      return typeof idOrIndex === "number" ? idOrIndex : state.ids.indexOf(idOrIndex);
    };
  },
  isCurrent: function isCurrent(idOrIndex) {
    return function (state) {
      return state.current >= 0 && state.current === selectors.indexOf(idOrIndex)(state);
    };
  }
};
var actions = {
  show: function show(idOrIndex) {
    return function (state) {
      return {
        current: selectors.indexOf(idOrIndex)(state)
      };
    };
  },
  hide: function hide() {
    return function () {
      return {
        current: -1
      };
    };
  },
  toggle: function toggle(idOrIndex) {
    return function (state) {
      return selectors.isCurrent(idOrIndex)(state) ? actions.hide()(state) : actions.show(idOrIndex)(state);
    };
  },
  previous: function previous() {
    return function (state) {
      if (selectors.hasPrevious()(state)) {
        return {
          current: state.current - 1
        };
      }

      if (state.loop) {
        return {
          current: state.ids.length - 1
        };
      }

      return {};
    };
  },
  next: function next() {
    return function (state) {
      if (selectors.hasNext()(state)) {
        return {
          current: state.current + 1
        };
      }

      if (state.loop) {
        return {
          current: 0
        };
      }

      return {};
    };
  },
  reorder: function reorder(id, order) {
    if (order === void 0) {
      order = 0;
    }

    return function (state) {
      var _objectSpread2;

      var ordered = __chunk_1._objectSpread({}, state.ordered, (_objectSpread2 = {}, _objectSpread2[id] = order, _objectSpread2));

      var ids = state.ids.slice().sort(function (a, b) {
        return (ordered[a] || 0) - (ordered[b] || 0);
      });
      return __chunk_1._objectSpread({
        ordered: ordered,
        ids: ids
      }, selectors.isCurrent(id)(state) ? actions.show(id)(__chunk_1._objectSpread({}, state, {
        ids: ids
      })) : {});
    };
  },
  register: function register(id, order) {
    if (order === void 0) {
      order = 0;
    }

    return function (state) {
      var ids = state.ids.indexOf(id) >= 0 ? state.ids : state.ids.concat([id]);
      return actions.reorder(id, order)(__chunk_1._objectSpread({}, state, {
        ids: ids
      }));
    };
  },
  unregister: function unregister(id) {
    return function (state) {
      var index = selectors.indexOf(id)(state);

      if (index === -1) {
        return {};
      }

      var ordered = omit(state.ordered, state.ids[index]);
      var ids = state.ids.slice(0, index).concat(state.ids.slice(index + 1));

      if (selectors.isCurrent(id)(state) && !selectors.hasNext()(state)) {
        if (selectors.hasPrevious()(state)) {
          return __chunk_1._objectSpread({}, actions.previous()(state), {
            ids: ids,
            ordered: ordered
          });
        }

        return __chunk_1._objectSpread({}, actions.hide()(state), {
          ids: ids,
          ordered: ordered
        });
      }

      if (state.current >= ids.length) {
        return {
          current: ids.length - 1,
          ids: ids,
          ordered: ordered
        };
      }

      return {
        ids: ids,
        ordered: ordered
      };
    };
  },
  update: function update(id, nextId, orderArg) {
    return function (state) {
      var order = typeof orderArg !== "undefined" ? orderArg : state.ordered[id];
      var idChanged = id !== nextId;
      var orderChanged = order !== state.ordered[id];
      if (!idChanged && !orderChanged) return {};
      var overridingId = idChanged && state.ids.indexOf(nextId) >= 0;

      if (overridingId) {
        var nextOrderChanged = order !== state.ordered[nextId];
        var nextState = nextOrderChanged ? actions.reorder(nextId, order)(state) : {};
        return actions.unregister(id)(__chunk_1._objectSpread({}, state, nextState));
      }

      var index = selectors.indexOf(id)(state);
      var ids = state.ids.slice(0, index).concat([nextId], state.ids.slice(index + 1));
      return actions.reorder(nextId, order)(__chunk_1._objectSpread({}, state, {
        ids: ids
      }));
    };
  }
}; // istanbul ignore next

var StepContainer = function StepContainer(props) {
  return React.createElement(constate.Container, __chunk_1._extends({}, props, {
    initialState: __chunk_1._objectSpread({}, initialState, props.initialState),
    selectors: selectors,
    actions: actions
  }));
}; // @ts-ignore


StepContainer.propTypes = {
  initialState: PropTypes.object
};
var StepContainer$1 = Object.assign(StepContainer, {
  initialState: initialState,
  actions: actions,
  selectors: selectors
});

var StepNextComponent = function StepNextComponent(_ref) {
  var onClick = _ref.onClick,
      props = __chunk_1._objectWithoutPropertiesLoose(_ref, ["onClick"]);

  return React.createElement(Box.default, __chunk_1._extends({
    onClick: __chunk_5.callAll(props.next, onClick),
    disabled: !props.loop && props.hasNext && !props.hasNext()
  }, props));
};

var StepNext = styled.default(__chunk_4.hoist(StepNextComponent, Box.default)).withConfig({
  displayName: "StepNext",
  componentId: "sc-1tlsqf3-0"
})(["", ";"], styledTools.theme("StepNext")); // @ts-ignore

StepNext.propTypes = {
  next: PropTypes.func.isRequired,
  hasNext: PropTypes.func,
  loop: PropTypes.bool,
  onClick: PropTypes.func
};
var StepNext$1 = use.default(StepNext, "button");

var StepPreviousComponent = function StepPreviousComponent(_ref) {
  var onClick = _ref.onClick,
      props = __chunk_1._objectWithoutPropertiesLoose(_ref, ["onClick"]);

  return React.createElement(Box.default, __chunk_1._extends({
    onClick: __chunk_5.callAll(props.previous, onClick),
    disabled: !props.loop && props.hasPrevious && !props.hasPrevious()
  }, props));
};

var StepPrevious = styled.default(__chunk_4.hoist(StepPreviousComponent, Box.default)).withConfig({
  displayName: "StepPrevious",
  componentId: "sc-1d6cvgj-0"
})(["", ";"], styledTools.theme("StepPrevious")); // @ts-ignore

StepPrevious.propTypes = {
  previous: PropTypes.func.isRequired,
  hasPrevious: PropTypes.func,
  loop: PropTypes.bool,
  onClick: PropTypes.func
};
var StepPrevious$1 = use.default(StepPrevious, "button");

exports.StepContainer = StepContainer$1;
exports.StepNext = StepNext$1;
exports.StepPrevious = StepPrevious$1;
