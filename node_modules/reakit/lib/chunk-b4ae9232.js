'use strict';

var styledTools = require('styled-tools');
var __chunk_2 = require('./chunk-f0c301b2.js');

var bool = function bool(cssProp, validComponentProps) {
  return function (props) {
    var keys = Object.keys(props).filter(function (k) {
      return props[k] && validComponentProps.indexOf(k) >= 0;
    }).map(function (k) {
      return k.replace(/([A-Z])/g, "-$1").toLowerCase();
    });

    if (keys.length) {
      return cssProp + ": " + keys.join(" ") + ";";
    }

    return "";
  };
};
var value = function value(cssProp, componentProp) {
  return function (props) {
    var v = props[componentProp];
    if (typeof v === "undefined") return "";
    return cssProp + ": " + __chunk_2.numberToPx(v) + ";";
  };
};
var textColorWithProps = styledTools.withProp(["opaque", "palette", "tone"], function (opaque, paletteProp, tone) {
  if (tone === void 0) {
    tone = 0;
  }

  return styledTools.palette(opaque ? paletteProp + "Text" : paletteProp, tone, "inherit");
});
var bgColorWithProps = styledTools.withProp(["opaque", "palette", "tone"], function (opaque, paletteProp, tone) {
  if (tone === void 0) {
    tone = 0;
  }

  if (!opaque) {
    return "unset";
  }

  return styledTools.palette(paletteProp, tone, "unset");
});
var hasTransition = function hasTransition(props) {
  return Boolean(props.animated || props.fade || props.slide || props.expand);
};
var translate3d = function translate3d(x, y, z) {
  return "translate3d(" + __chunk_2.numberToPx(x) + ", " + __chunk_2.numberToPx(y) + ", " + __chunk_2.numberToPx(z) + ")";
};
var origin = function origin(x, y) {
  if (x === void 0) {
    x = "center";
  }

  if (y === void 0) {
    y = "center";
  }

  return __chunk_2.numberToPx(x) + " " + __chunk_2.numberToPx(y);
};
var calc = function calc(a, b) {
  return "calc(" + __chunk_2.numberToPx(a) + " + " + __chunk_2.numberToPx(b) + ")";
};
var minus = function minus(v) {
  return "-" + __chunk_2.numberToPx(v);
};
var expand = styledTools.ifProp({
  expand: true
}, styledTools.prop("defaultExpand", "center"), styledTools.prop("expand"));
var slide = styledTools.ifProp({
  slide: true
}, styledTools.prop("defaultSlide", "right"), styledTools.prop("slide"));
var scaleWithProps = styledTools.ifProp("expand", "scale(0.01)");
var originWithProps = styledTools.withProp(["originX", "originY"], function (x, y) {
  return styledTools.switchProp(expand, {
    center: origin(calc("50%", x), calc("50%", y)),
    top: origin(calc("50%", x), calc("100%", y)),
    right: origin(x, calc("50%", y)),
    bottom: origin(calc("50%", x), y),
    left: origin(calc("100%", x), calc("50%", y))
  }, origin(calc("50%", x), calc("50%", y)));
});
var translateWithProps = styledTools.withProp(["translateX", "translateY"], translate3d);
var slideWithProps = styledTools.withProp(["translateX", "translateY", "slideOffset"], function (x, y, offset) {
  if (offset === void 0) {
    offset = "100%";
  }

  return styledTools.switchProp(slide, {
    top: translate3d(x, calc(offset, y)),
    right: translate3d(calc(minus(offset), x), y),
    bottom: translate3d(x, calc(minus(offset), y)),
    left: translate3d(calc(offset, x), y)
  }, translate3d(x, y));
});

exports.bool = bool;
exports.bgColorWithProps = bgColorWithProps;
exports.textColorWithProps = textColorWithProps;
exports.hasTransition = hasTransition;
exports.translateWithProps = translateWithProps;
exports.originWithProps = originWithProps;
exports.scaleWithProps = scaleWithProps;
exports.slideWithProps = slideWithProps;
exports.value = value;
