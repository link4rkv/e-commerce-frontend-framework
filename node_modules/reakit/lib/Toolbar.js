'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var __chunk_1 = require('./chunk-582bef72.js');
var React = require('react');
var PropTypes = require('prop-types');
var styledTools = require('styled-tools');
var __chunk_2 = require('./chunk-f0c301b2.js');
var __chunk_4 = require('./chunk-5814b5fa.js');
var styled = require('./styled.js');
var use = require('./use.js');
var Box = require('./Box.js');
var ReactDOM = require('react-dom');
var s = _interopDefault(require('styled-selector'));
var __chunk_5 = require('./chunk-25591e69.js');
require('styled-components');
require('reuse');
require('@emotion/is-prop-valid');
require('./chunk-b4ae9232.js');

var ToolbarComponent = function ToolbarComponent(props) {
  return React.createElement(Box.default, __chunk_1._extends({
    "aria-orientation": props.vertical ? "vertical" : "horizontal"
  }, props));
};

var Toolbar = styled.default(__chunk_4.hoist(ToolbarComponent, Box.default)).withConfig({
  displayName: "Toolbar",
  componentId: "sc-51m1wx-0"
})(["position:relative;display:grid;width:100%;padding:", ";grid-gap:", ";grid-template:\"start center end\" / 1fr auto 1fr;&[aria-orientation=\"vertical\"]{width:min-content;height:100%;grid-template:\"start\" 1fr \"center\" auto \"end\" 1fr;}", ";"], styledTools.withProp("gutter", __chunk_2.numberToPx), styledTools.withProp("gutter", __chunk_2.numberToPx), styledTools.theme("Toolbar")); // @ts-ignore

Toolbar.propTypes = {
  gutter: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  vertical: PropTypes.bool
};
Toolbar.defaultProps = {
  role: "toolbar",
  gutter: 8
};
var Toolbar$1 = use.default(Toolbar, "div");

var ToolbarContent = styled.default(Box.default).withConfig({
  displayName: "ToolbarContent",
  componentId: "sc-1vj9ddg-0"
})(["display:grid;grid-auto-flow:column;grid-auto-columns:min-content;grid-gap:inherit;grid-area:", ";justify-content:", ";align-items:center;[aria-orientation=\"vertical\"] > &{grid-auto-flow:row;grid-auto-rows:min-content;justify-content:initial;align-content:", ";}", ";"], styledTools.prop("align"), styledTools.prop("align"), styledTools.prop("align"), styledTools.theme("ToolbarContent")); // @ts-ignore

ToolbarContent.propTypes = {
  align: PropTypes.oneOf(["start", "center", "end"])
};
ToolbarContent.defaultProps = {
  align: "start"
};
var ToolbarContent$1 = use.default(ToolbarContent, "div");

var ToolbarFocusableComponent =
/*#__PURE__*/
function (_React$Component) {
  __chunk_1._inheritsLoose(ToolbarFocusableComponent, _React$Component);

  function ToolbarFocusableComponent(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;

    __chunk_1._defineProperty(__chunk_1._assertThisInitialized(__chunk_1._assertThisInitialized(_this)), "element", void 0);

    __chunk_1._defineProperty(__chunk_1._assertThisInitialized(__chunk_1._assertThisInitialized(_this)), "toolbar", void 0);

    __chunk_1._defineProperty(__chunk_1._assertThisInitialized(__chunk_1._assertThisInitialized(_this)), "getInitialTabIndex", function () {
      var tabIndex = _this.props.tabIndex;
      return typeof tabIndex !== "undefined" ? tabIndex : -1;
    });

    __chunk_1._defineProperty(__chunk_1._assertThisInitialized(__chunk_1._assertThisInitialized(_this)), "getElement", function () {
      if (typeof _this.element === "undefined") {
        _this.element = ReactDOM.findDOMNode(__chunk_1._assertThisInitialized(__chunk_1._assertThisInitialized(_this)));
      }

      return _this.element;
    });

    __chunk_1._defineProperty(__chunk_1._assertThisInitialized(__chunk_1._assertThisInitialized(_this)), "getToolbar", function () {
      if (typeof _this.toolbar === "undefined") {
        _this.toolbar = _this.getElement().closest(s(Toolbar$1));
      }

      return _this.toolbar;
    });

    __chunk_1._defineProperty(__chunk_1._assertThisInitialized(__chunk_1._assertThisInitialized(_this)), "getFocusables", function () {
      if (!_this.getToolbar()) return document.createDocumentFragment().childNodes;
      return _this.getToolbar().querySelectorAll(s(ToolbarFocusable));
    });

    __chunk_1._defineProperty(__chunk_1._assertThisInitialized(__chunk_1._assertThisInitialized(_this)), "getCurrentIndex", function (focusables) {
      var currentIndex = -1;
      focusables.forEach(function (item, i) {
        if (item === _this.getElement()) {
          currentIndex = i;
        }
      });
      return currentIndex;
    });

    __chunk_1._defineProperty(__chunk_1._assertThisInitialized(__chunk_1._assertThisInitialized(_this)), "getNextFocusable", function (focusables, currentIndex) {
      var index = currentIndex + 1;
      return focusables.item(index) || focusables.item(0);
    });

    __chunk_1._defineProperty(__chunk_1._assertThisInitialized(__chunk_1._assertThisInitialized(_this)), "getPreviousFocusable", function (focusables, currentIndex) {
      var index = currentIndex ? currentIndex - 1 : focusables.length - 1;
      return focusables.item(index);
    });

    __chunk_1._defineProperty(__chunk_1._assertThisInitialized(__chunk_1._assertThisInitialized(_this)), "toolbarIsVertical", function () {
      if (!_this.getToolbar()) return false;
      return _this.getToolbar().getAttribute("aria-orientation") === "vertical";
    });

    __chunk_1._defineProperty(__chunk_1._assertThisInitialized(__chunk_1._assertThisInitialized(_this)), "addKeyDownHandler", function () {
      if (!_this.getToolbar()) return;

      _this.getElement().addEventListener("keydown", _this.handleKeyDown);
    });

    __chunk_1._defineProperty(__chunk_1._assertThisInitialized(__chunk_1._assertThisInitialized(_this)), "removeKeyDownHandler", function () {
      if (!_this.getToolbar()) return;

      _this.getElement().removeEventListener("keydown", _this.handleKeyDown);
    });

    __chunk_1._defineProperty(__chunk_1._assertThisInitialized(__chunk_1._assertThisInitialized(_this)), "handleKeyDown", function (e) {
      var isVertical = _this.toolbarIsVertical();

      var nextKey = isVertical ? "ArrowDown" : "ArrowRight";
      var previousKey = isVertical ? "ArrowUp" : "ArrowLeft";
      var willPerformEvent = [nextKey, previousKey].indexOf(e.key) >= 0;
      if (!willPerformEvent) return;

      var focusables = _this.getFocusables();

      var currentIndex = _this.getCurrentIndex(focusables);

      e.preventDefault();

      _this.setState({
        tabIndex: _this.getInitialTabIndex()
      });

      if (e.key === nextKey) {
        _this.getNextFocusable(focusables, currentIndex).focus();
      } else {
        _this.getPreviousFocusable(focusables, currentIndex).focus();
      }
    });

    __chunk_1._defineProperty(__chunk_1._assertThisInitialized(__chunk_1._assertThisInitialized(_this)), "handleFocus", function () {
      _this.setState({
        tabIndex: 0
      });
    });

    _this.state = {
      tabIndex: _this.getInitialTabIndex()
    };
    return _this;
  }

  var _proto = ToolbarFocusableComponent.prototype;

  _proto.componentDidMount = function componentDidMount() {
    if (this.getCurrentIndex(this.getFocusables()) === 0) {
      this.setState({
        tabIndex: 0
      });
    }

    if (!this.props.disabled) {
      this.addKeyDownHandler();
    }
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var disabled = this.props.disabled;

    if (prevProps.disabled !== disabled) {
      if (disabled) {
        this.removeKeyDownHandler();
      } else {
        this.addKeyDownHandler();
      }
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.removeKeyDownHandler();
  };

  _proto.render = function render() {
    return React.createElement(Box.default, __chunk_1._extends({}, this.props, {
      onFocus: __chunk_5.callAll(this.handleFocus, this.props.onFocus),
      tabIndex: this.state.tabIndex
    }));
  };

  return ToolbarFocusableComponent;
}(React.Component);

var ToolbarFocusable = styled.default(__chunk_4.hoist(ToolbarFocusableComponent, Box.default)).withConfig({
  displayName: "ToolbarFocusable",
  componentId: "sc-98sn5t-0"
})(["", ";"], styledTools.theme("ToolbarFocusable")); // @ts-ignore

ToolbarFocusable.propTypes = {
  tabIndex: PropTypes.number,
  onFocus: PropTypes.func,
  disabled: PropTypes.bool
};
var ToolbarFocusable$1 = use.default(ToolbarFocusable, "div");

var index = Object.assign(Toolbar$1, {
  Content: ToolbarContent$1,
  Focusable: ToolbarFocusable$1
});

exports.default = index;
